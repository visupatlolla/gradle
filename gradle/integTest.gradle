apply plugin: 'java'

sourceSets {
    integTest {
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

configurations {
    integTestCompile.extendsFrom testCompile
    integTestRuntime.extendsFrom testRuntime
}

dependencies {
    integTestCompile project(":internalIntegTesting")

    //so that implicit help tasks are available:
    integTestRuntime project(':diagnostics')
    //above can be removed when we implement the auto-apply plugins
}

ext.integTestTasks = tasks.withType(Test).matching { it.name.toLowerCase().endsWith('integtest') }

import org.gradle.util.GradleVersion

import java.util.regex.Pattern

def removeOldVersionsFromDir(File dir, def shouldDelete, def dirPrefix = "", def dirSuffix = "") {
    if (dir.directory) {

        for (File cacheDir: dir.listFiles()) {
            if (!cacheDir.name.startsWith(dirPrefix) || !cacheDir.name.endsWith(dirSuffix)) {
                continue
            }
            def dirVersion = cacheDir.name.substring(dirPrefix.length(), cacheDir.name.length() - dirSuffix.length())
            if (!dirVersion.matches("\\d+\\.\\d+(\\.\\d+)?(-\\w+)*(-\\d{14}[+-]\\d{4})?")) {
                continue
            }

            def cacheVersion
            try {
                cacheVersion = GradleVersion.version(dirVersion)
            } catch (IllegalArgumentException e) {
                // Ignore
                continue
            }

            if (shouldDelete(cacheVersion)) {
                println "Removing old cache directory : ${cacheDir}"
                delete(cacheDir)
            }
        }
    }
}

project(":") {
    if (tasks.findByName('cleanUpCaches')) {
        return
    }

    task cleanUpCaches {
        dependsOn ':createBuildReceipt'
        doLast {
            def executingVersion = GradleVersion.version(gradle.gradleVersion)

            def versionProps = readBuildReceipt("${buildDir}/${buildReceiptFileName}")
            def testedVersion = GradleVersion.version(versionProps.versionNumber)

            // Expire .gradle cache where major version is older than executing version
            def expireTaskCache = { def candidateVersion ->
                return candidateVersion.baseVersion < executingVersion.baseVersion
            }

            // Expire intTestImage cache snapshots that are older than the tested version
            def expireIntegTestCache = { def candidateVersion ->
                return candidateVersion.snapshot && candidateVersion < testedVersion
            }

            removeOldVersionsFromDir(file("buildSrc/.gradle"), expireTaskCache)
            removeOldVersionsFromDir(file(".gradle"), expireTaskCache)
            removeOldVersionsFromDir(file("intTestHomeDir/worker-1/caches"), expireIntegTestCache)
            removeOldVersionsFromDir(file("intTestHomeDir/worker-1/daemon"), expireIntegTestCache)
            removeOldVersionsFromDir(file("intTestHomeDir/worker-1/wrapper/dists"), expireIntegTestCache, "gradle-", "-bin")
            delete(file("intTestHomeDir/worker-1/wrapper/dists/dist"))
        }
    }
}

project(":") {
    if (tasks.findByName('cleanUpDaemons')) {
        return
    }
    task cleanUpDaemons {
        onlyIf { !org.gradle.internal.jvm.Jvm.current().ibmJvm }
        doLast {
            def output = new ByteArrayOutputStream()
            exec {
                commandLine(org.gradle.internal.jvm.Jvm.current().getExecutable("jps").absolutePath, "-m")
                standardOutput = output
            }
            def pattern = Pattern.compile("(\\d+)\\s+GradleDaemon\\s+(\\S+)\\s+(.+)")
            output.toString().readLines().each { String line ->
                def matcher = pattern.matcher(line)
                if (!matcher.matches()) {
                    return
                }
                def remainder = matcher.group(3)
                if (!remainder.startsWith("${project.projectDir}${File.separator}")) {
                    return
                }
                def pid = matcher.group(1)
                println "killing daemon with pid $pid"
                exec {
                    if (org.gradle.internal.os.OperatingSystem.current().windows) {
                        commandLine = ["taskkill.exe", "/F", "/T", "/PID", pid]
                    } else {
                        commandLine = ["kill", pid]
                    }
                }
            }
        }
    }
}

integTestTasks.all { Test task ->
    dependsOn ':intTestImage', ':cleanUpCaches'
    finalizedBy ':cleanUpDaemons'
    shouldRunAfter 'test'
    
    testClassesDir = sourceSets.integTest.output.classesDir
    classpath = sourceSets.integTest.runtimeClasspath
    testSrcDirs = []
    jvmArgs '-Xmx512m', '-XX:MaxPermSize=256m', '-XX:+HeapDumpOnOutOfMemoryError'

    reports.junitXml.destination = file("${project.testResultsDir}/$name")

    // use -PtestVersions=all or -PtestVersions=1.2,1.3â€¦
    systemProperties['org.gradle.integtest.versions'] = project.hasProperty('testVersions') ? project.testVersions : 'latest'

    systemProperties['org.gradle.integtest.cpp.toolChains'] = project.hasProperty("testAllPlatforms") ? 'all' : 'default';

    dependsOn project.task("configure${task.name.capitalize()}") << {
        configure(task) {
            reports.html.destination = file("${project.reporting.baseDir}/$name")
            systemProperties['integTest.gradleHomeDir'] = rootProject.intTestImage.destinationDir.absolutePath
            systemProperties['integTest.gradleUserHomeDir'] = rootProject.file('intTestHomeDir').absolutePath
            systemProperties['integTest.libsRepo'] = rootProject.file('build/repo')
            
            // If the projects int test need the distributions, they should add:
            // inputs.files rootProject.buildDists
            systemProperties['integTest.distsDir'] = rootProject.distsDir.absolutePath

            // The user home dir is not wiped out by clean
            // Move the daemon working space underneath the build dir so they don't pile up on CI
            systemProperties['org.gradle.integtest.daemon.registry'] = file("$rootProject.buildDir/daemon").absolutePath
        }
    }

    allTestTasksForFastFeedbackOrder { testTask ->
        task.shouldRunAfter testTask
    }
}

task integTest(type: Test) {
    def defaultExecuter = project.hasProperty("defaultIntegTestExecuter") ? project.defaultIntegTestExecuter : "embedded"
    systemProperties['org.gradle.integtest.executer'] = defaultExecuter
}
check.dependsOn(integTest)

['embedded', 'forking', 'daemon', 'embeddedDaemon', 'parallel'].each { mode ->
    def taskName = "${mode}IntegTest"
    tasks.create(taskName, Test).configure {
        systemProperties['org.gradle.integtest.executer'] = mode
    }
}

task crossVersionIntegTest {
    description "Runs the cross version tests against all Gradle versions"
}

releasedVersions.allVersions.each { targetVersion ->
    tasks.create("gradle${targetVersion}IntegTest", Test).configure {
        crossVersionIntegTest.dependsOn path
        description "Runs the cross version tests against Gradle ${targetVersion}"
        systemProperties['org.gradle.integtest.versions'] = targetVersion
        systemProperties['org.gradle.integtest.executer'] = 'forking'
        include '**/*CrossVersion*'
    }
}

plugins.withType(org.gradle.plugins.ide.idea.IdeaPlugin) { // lazy as plugin not applied yet
    idea {
        module {
            testSourceDirs += sourceSets.integTest.groovy.srcDirs
            testSourceDirs += sourceSets.integTest.resources.srcDirs
            scopes.TEST.plus.add(configurations.integTestCompile)
            scopes.TEST.plus.add(configurations.integTestRuntime)
        }
    }
}

plugins.withType(org.gradle.plugins.ide.eclipse.EclipsePlugin) { // lazy as plugin not applied yet
    eclipse {
        classpath {
            plusConfigurations.add(configurations.integTestCompile)
            plusConfigurations.add(configurations.integTestRuntime)
        }
    }
}
